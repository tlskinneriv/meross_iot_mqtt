"""Config flow to configure Tuya integration"""

import logging

import homeassistant.helpers.config_validation as cv
import voluptuous as vol
from homeassistant import config_entries
from homeassistant.const import CONF_PASSWORD, CONF_USERNAME

from .const import DOMAIN, CONF_DEVICENAME, CONF_MAC, CONF_UUID

_LOGGER = logging.getLogger(__name__)


class MerossMQTTConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):
    """Meross MQTT integration config flow."""

    VERSION = 1
    CONNECTION_CLASS = config_entries.CONN_CLASS_LOCAL_PUSH

    def __init__(self):
        """Initialize flow"""
        self._uuid = vol.UNDEFINED
        self._mac = vol.UNDEFINED
        self._device_name = vol.UNDEFINED
        self._platform = vol.UNDEFINED

    async def async_step_user(self, user_input=None):
        """Handle a flow initialized by the user."""
        errors = {}

        if self._async_current_entries():
            return self.async_abort(reason="already_configured")

        if user_input is not None:
            self._uuid = user_input["uuid"]
            self._mac = user_input["mac"]
            self._device_name = user_input["device_name"]
            self._platform = user_input["platform"]

            # Steps for login checking and error handling needed here

            return self.async_create_entry(
                title=user_input[CONF_UUID],
                data=user_input,
                description_placeholders={"docs_url": "tuya.com"},
            )

        return self.async_show_form(
            step_id="user",
            data_schema=vol.Schema(
                {
                    vol.Required(CONF_UUID): str,
                    vol.Required(CONF_MAC): str,
                    vol.Required(CONF_DEVICENAME): str,
                    vol.Optional(CONF_PLATFORM, default="switch"): str,
                }
            ),
            description_placeholders={"docs_url": "tuya.com"},
            errors=errors,
        )

    async def async_step_import(self, user_input):
        """Import a config flow from configuration."""

        if self._async_current_entries():
            return self.async_abort(reason="already_configured")

        uuid = user_input[CONF_UUID]
        mac = user_input[CONF_MAC]
        device_name = user_input[CONF_DEVICENAME]
        platform = user_input[CONF_PLATFORM]

        # code for validating login information and error handling needed

        return self.async_create_entry(
            title=f"{uuid} (from configuration)",
            data={
                CONF_UUID: uuid,
                CONF_MAC: mac,
                CONF_DEVICENAME: device_name,
                CONF_PLATFORM: platform,
            },
        )